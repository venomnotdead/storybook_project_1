"use strict";(self.webpackChunkproject_one=self.webpackChunkproject_one||[]).push([[484],{"./src/components/Task.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ActionsData:()=>ActionsData,Archived:()=>Archived,Default:()=>Default,Pinned:()=>Pinned,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _storybook_test__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),_Task__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/Task.jsx");const ActionsData={onArchiveTask:(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fn)(),onPinTask:(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fn)()},__WEBPACK_DEFAULT_EXPORT__={component:_Task__WEBPACK_IMPORTED_MODULE_1__.A,title:"Task",tags:["autodocs"],excludeStories:/.*Data$/,args:{...ActionsData}},Default={args:{task:{id:"1",title:"Test Task",state:"TASK_INBOX"}}},Pinned={args:{task:{...Default.args.task,state:"TASK_PINNED"}}},Archived={args:{task:{...Default.args.task,state:"TASK_ARCHIVED"}}},__namedExportsOrder=["ActionsData","Default","Pinned","Archived"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    task: {\n      id: "1",\n      title: "Test Task",\n      state: "TASK_INBOX"\n    }\n  }\n}',...Default.parameters?.docs?.source}}},Pinned.parameters={...Pinned.parameters,docs:{...Pinned.parameters?.docs,source:{originalSource:'{\n  args: {\n    task: {\n      ...Default.args.task,\n      state: "TASK_PINNED"\n    }\n  }\n}',...Pinned.parameters?.docs?.source}}},Archived.parameters={...Archived.parameters,docs:{...Archived.parameters?.docs,source:{originalSource:'{\n  args: {\n    task: {\n      ...Default.args.task,\n      state: "TASK_ARCHIVED"\n    }\n  }\n}',...Archived.parameters?.docs?.source}}}},"./src/components/Task.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>Task});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),prop_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);function Task({task:{id,title,state},onArchiveTask,onPinTask}){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{className:`list-item ${state}`,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("label",{htmlFor:`archiveTask-${id}`,"aria-label":`archiveTask-${id}`,className:"checkbox",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input",{type:"checkbox",disabled:!0,name:"checked",id:`archiveTask-${id}`,checked:"TASK_ARCHIVED"===state}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("span",{className:"checkbox-custom",onClick:()=>onArchiveTask(id)})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("label",{htmlFor:`title-${id}`,"aria-label":title,className:"title",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input",{type:"text",value:title,readOnly:!0,name:"title",id:`title-${id}`,placeholder:"Input title"})}),"TASK_ARCHIVED"!==state&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button",{className:"pin-button",onClick:()=>onPinTask(id),id:`pinTask-${id}`,"aria-label":`pinTask-${id}`,children:"pin"},`pinTask-${id}`)]})}Task.propTypes={task:prop_types__WEBPACK_IMPORTED_MODULE_1___default().shape({id:prop_types__WEBPACK_IMPORTED_MODULE_1___default().string.isRequired,title:prop_types__WEBPACK_IMPORTED_MODULE_1___default().string.isRequired,state:prop_types__WEBPACK_IMPORTED_MODULE_1___default().string.isRequired}),onArchiveTask:prop_types__WEBPACK_IMPORTED_MODULE_1___default().func,onPinTask:prop_types__WEBPACK_IMPORTED_MODULE_1___default().func},Task.__docgenInfo={description:"",methods:[],displayName:"Task",props:{task:{description:"Composition of the task",type:{name:"shape",value:{id:{name:"string",description:"Id of the task",required:!0},title:{name:"string",description:"Title of the task",required:!0},state:{name:"string",description:"Current state of the task",required:!0}}},required:!1},onArchiveTask:{description:"Event to change the task to archived",type:{name:"func"},required:!1},onPinTask:{description:"Event to change the task to pinned",type:{name:"func"},required:!1}}}}}]);